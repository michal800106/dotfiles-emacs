#+TITLE: Emacs Configuration
#+AUTHOR: Harry R. Schwartz
#+EMAIL: hello@harryrschwartz.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/projects/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Set personal information

** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "michalz"
        user-mail-address "zielonka.michal@gmail.com"
        calendar-latitude 40.00
        calendar-longitude -105.16
        calendar-location-name "nobody")
#+END_SRC

** Access my netrc data

I store a few credentials in a =.netrc= file. Actually, I think the only creds I
have in there right now are for Instapaper, but this is still a convenient way
to store not-too-terribly-sensitive secrets.

#+BEGIN_SRC emacs-lisp
  (require 'netrc)

  (setq netrc-file "~/.netrc")

  (defun netrc-username (machine)
    "Helper function to extract a username from my netrc."
    (car (netrc-credentials machine)))

  (defun netrc-password (machine)
    "Helper function to extract a password from my netrc."
    (cadr (netrc-credentials machine)))
#+END_SRC

* Add =resources= to =load-path=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun hrs/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
               (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun hrs/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun hrs/visit-last-migration ()
    "Open the most recent Rails migration. Relies on projectile."
    (interactive)
    (let ((migrations
           (directory-files
            (expand-file-name "db/migrate" (projectile-project-root)) t)))
      (find-file (car (last migrations)))))

  (defun hrs/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun hrs/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun hrs/region-or-word ()
    (if mark-active
        (buffer-substring-no-properties (region-beginning)
                                        (region-end))
      (thing-at-point 'word)))

  (defun hrs/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))
#+END_SRC

* Databases
  #+BEGIN_SRC emacs-lisp
    (use-package ejc-sql
      :ensure t
      :config (add-hook 'ejc-sql-minor-mode-hook
                        (lambda ()
                          (auto-complete-mode t)
                          (ejc-ac-setup))
              (add-hook 'ejc-sql-connected-hook
                        (lambda ()
                          (ejc-set-fetch-size nil)
                          (ejc-set-max-rows nil)
                          (ejc-set-column-width-limit nil)
                          (ejc-set-use-unicode t)))
              ))
  #+END_SRC

  #+RESULTS:
  : t

* UI preferences
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+END_SRC

There's a tiny scroll bar that appears in the minibuffer window. This disables
that:

#+BEGIN_SRC emacs-lisp
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Load up a theme

I'm currently using the "solarized-light" theme. I've got a scenic wallpaper, so
just a hint of transparency looks lovely and isn't distracting or hard to read.

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :config
    (load-theme 'solarized-light t)

    (setq solarized-use-variable-pitch nil
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0)

    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))

  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (defun hrs/apply-theme ()
    "Apply the `solarized-light' theme and make frames just slightly transparent."
    (interactive)
    (load-theme 'solarized-light t)
    (transparency 70))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (hrs/apply-theme))))
    (hrs/apply-theme))
#+END_SRC

** Use =moody= for a beautiful modeline

This gives me a truly lovely ribbon-based modeline.

#+BEGIN_SRC emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** Use =minions= to hide all minor modes

I never want to see a minor mode, and manually adding =:diminish= to every
use-package declaration is a hassle. This uses =minions= to hide all the minor
modes in the modeline. Nice!

By default there's a =;-)= after the major mode; that's an adorable default, but
I'd rather skip it.

#+BEGIN_SRC emacs-lisp
   (use-package minions
     :config
     (setq minions-mode-line-lighter ""
           minions-mode-line-delimiters '("" . ""))
     (minions-mode 1))
#+END_SRC

** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Set default font and configure font resizing

I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
  (setq hrs/default-font "Inconsolata")
  (setq hrs/default-font-size 11)
  (setq hrs/current-font-size hrs/default-font-size)

  (setq hrs/font-change-increment 1.1)

  (defun hrs/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (hrs/font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

* Project management

I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

** =ag=

Set up =ag= for displaying search results.

#+BEGIN_SRC emacs-lisp
  (use-package ag)
#+END_SRC

** =company=

Use =company-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Use =M-/= for completion.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

** =dumb-jump=

The =dumb-jump= package works well enough in a [[https://github.com/jacktasia/dumb-jump#supported-languages][ton of environments]], and it
doesn't require any additional setup. I've bound its most useful command to
=M-.=.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (setq dumb-jump-selector 'ivy))
#+END_SRC

** =flycheck=

 #+BEGIN_SRC emacs-lisp
   (use-package flycheck)
 #+END_SRC

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-x g=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- On the command line I'll generally push a new branch with a plain old =git
  push=, which automatically creates a tracking branch on (usually) =origin=.
  Magit, by default, wants me to manually specify an upstream branch. This binds
  =P P= to =magit-push-implicitly=, which is just a wrapper around =git push
  -v=. Convenient!
- I'd like to start in the insert state when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50))
#+END_SRC

I've been playing around with the newly-released =forge= for managing GitHub PRs
and issues. Seems slick so far.

#+BEGIN_SRC emacs-lisp
  (use-package ghub)
  (use-package forge)
#+END_SRC

** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind
    ("C-c v" . 'projectile-ag)

    :config
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil))
#+END_SRC

** =undo-tree=

I like tree-based undo management. I only rarely need it, but when I do, oh boy.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree)
#+END_SRC

* Programming environments

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+END_SRC

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

** CSS, Sass, and Less

Indent by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+END_SRC

Don't compile the current SCSS file every time I save.

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+END_SRC

Install Less.

#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode)
#+END_SRC

** Golang

Install =go-mode= and related packages:

#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
  (use-package go-errcheck)
  (use-package company-go)
#+END_SRC

Define my =$GOPATH= and tell Emacs where to find the Go binaries.

#+BEGIN_SRC emacs-lisp
  (setenv "GOPATH" "/home/michalz/go")
  (hrs/append-to-path (concat (getenv "GOPATH") "/bin"))
#+END_SRC

Run =goimports= on every file when saving, which formats the file and
automatically updates the list of imports. This requires that the =goimports=
binary be installed.

#+BEGIN_SRC emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

When I open a Go file,

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode)
              (if (not (string-match "go" compile-command))
                  (set (make-local-variable 'compile-command)
                       "go build -v && go test -v && go vet"))
              (flycheck-mode)))
#+END_SRC

** Haml and Slim

Install the Haml and Slim packages.

#+BEGIN_SRC emacs-lisp
  (use-package haml-mode)
  (use-package slim-mode)
#+END_SRC

If I'm editing Haml or Slim templates I'm probably in a Rails project. In that
case, I'd like to still be able to run my tests from the appropriate buffers.

#+BEGIN_SRC emacs-lisp
  (add-hook 'slim-mode-hook 'rspec-mode)
  (add-hook 'haml-mode-hook 'rspec-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook
            (lambda ()
              (haskell-doc-mode)
              (turn-on-haskell-indent)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (hrs/append-to-path "~/.cabal/bin")
#+END_SRC

** JavaScript and CoffeeScript

Install =coffee-mode= from editing CoffeeScript code.

#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode)
#+END_SRC

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+END_SRC

** Lisps

I like to use =paredit= in Lisp modes to balance parentheses (and more!).

#+BEGIN_SRC emacs-lisp
  (use-package paredit)
#+END_SRC

=rainbow-delimiters= is convenient for coloring matching parentheses.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters)
#+END_SRC

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit=, =rainbow-delimiters=, and
highlighting the whole expression when point is on a parenthesis.

#+BEGIN_SRC emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (paredit-mode)
                     (rainbow-delimiters-mode))))
#+END_SRC

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC

I also like using =flycheck-package= to ensure that my Elisp packages are
correctly formatted.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-package)

  (eval-after-load 'flycheck
    '(flycheck-package-setup))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (setq python-saved-check-command nil)

  (defun find_nearest_tox_venv ()
    (let ((dominating-file (locate-dominating-file default-directory
                                                   (lambda (dir)
                                                     (cl-intersection
                                                      `(".tox")
                                                      (directory-files dir)
                                                      :test 'string-equal)))))
      (when dominating-file
        (expand-file-name ".tox/py37" dominating-file))))

  (defun activate-venv-and-reload ()
    (let ((venv (find_nearest_tox_venv)))
      (when venv
        (pyvenv-activate venv))))

  ;; (use-package auto-virtualenv
  ;;   :ensure t
  ;;   :config
  ;;   ;; (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
  ;;   ;; (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)

  (defvar venv_switch-buffer-functions--last-buffer
    nil
    "The last current buffer.")

  (defun venv_switch-buffer-functions-run (&rest _)
    "Run `switch-buffer-functions' if needed.
  This function checks the result of `current-buffer', and run
  `switch-buffer-functions' when it has been changed from
  the last buffer.
  This function should be hooked to `post-command-hook'."
    (when (eq major-mode 'python-mode)
    (unless (eq (current-buffer)
                  venv_switch-buffer-functions--last-buffer)
        (let ((current (current-buffer))
              (previous venv_switch-buffer-functions--last-buffer))
          (setq venv_switch-buffer-functions--last-buffer
                current)
          (activate-venv-and-reload)))))
  (add-hook 'window-selection-change-functions 'venv_switch-buffer-functions-run)

  ;; ;; (use-package anaconda-mode
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'python-mode-hook 'anaconda-mode)
  ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  ;;   :diminish anaconda-mode
  ;;   :diminish eldoc-mode
  ;;   :diminish auto-revert-mode)

  ;; (use-package company-anaconda
  ;;   :ensure t
  ;;   :config
  ;;   (add-to-list 'company-backends 'company-anaconda))
  ;;

  (use-package python-docstring
    :ensure t
    :config
    (python-docstring-install)
    :diminish python-docstring-mode)

  ;; ipython support, also remove weird character on ipython prompt
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython")
    (setq python-shell-interpreter-args "--simple-prompt"))

  (use-package blacken
    :ensure t
    :diminish blacken-mode
    ;; :hook (python-mode . blacken-mode)
    :config
    ;; (setq blacken-line-length 100)
    :bind (([?\C-c ?\C-x ?a] . blacken-buffer)))

  (use-package pyvenv
    :ensure t
    :bind (([?\C-c ?\C-x ?v] . pyvenv-workon)))

  (use-package pip-requirements
    :ensure t
    :preface
    (defun me/pip-requirements-ignore-case ()
      (setq-local completion-ignore-case t))
    :init (add-hook 'pip-requirements-mode-hook #'me/pip-requirements-ignore-case))

  (use-package python-pytest
    :ensure t
    :bind (("C-c C-x t" . python-pytest-popup)))

  (use-package smart-dash
    :ensure t
    :config
    (add-hook 'python-mode-hook 'smart-dash-mode))

  (use-package pipenv
    :ensure t
    :hook (python-mode . pipenv-mode)
    :diminish pipenv-mode
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-default)
    (setq pipenv-keymap-prefix (kbd "C-c C-o")))
#+END_SRC

** Ruby and RSpec

I use =chruby= to switch between versions of Ruby. This sets a default version
to use within Emacs (for things like =xmp= or =rspec=).

#+BEGIN_SRC emacs-lisp
  (setq hrs/ruby-version "2.5.3")

  (use-package chruby
    :config
    (chruby hrs/ruby-version))
#+END_SRC

Ruby executables are installed in =~/.gem/ruby/<version>/bin=. This ensures that
that's included in the path. In particular, we want that directory to be
included because it contains the =xmpfilter= executable, which is used below.

#+BEGIN_SRC emacs-lisp
  (hrs/append-to-path (format "~/.gem/ruby/%s/bin" hrs/ruby-version))
#+END_SRC

Running tests from within Emacs is awfully convenient.

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode)
#+END_SRC

=rcodetools= provides =xmp=, which lets me evaluate a Ruby buffer and display
the results in "magic" (=# =>=) comments.

I disable warnings when running code through =xmp= because I disagree with a few
of them (complaining about private =attr_reader=, especially) and they gunk up
my buffer.

#+BEGIN_SRC emacs-lisp
  (setq xmpfilter-command-name
        "ruby -S xmpfilter --no-warnings --dev --fork --detect-rbtest")
  (require 'rcodetools)
#+END_SRC

I like running Rubocop through Flycheck, but it also invokes Reek, which I've
found to be more of a nuisance than a help. This disables the =ruby-reek=
checker:

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers '(ruby-reek))
#+END_SRC

When assigning the result of a conditional, I like to align the expression to
match the beginning of the statement instead of indenting it all the way to the
=if=.

#+BEGIN_SRC emacs-lisp
  (setq ruby-align-to-stmt-keywords '(def if))
#+END_SRC

Ruby method comments are often formatted with Yard.

#+BEGIN_SRC emacs-lisp
  (use-package yard-mode)
#+END_SRC

Insert =end= keywords automatically when I start to define a method, class,
module, or block.

#+BEGIN_SRC emacs-lisp
  (use-package ruby-end)
#+END_SRC

Install and enable =projectile-rails= mode in all Rail-related buffers.

#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
    :config
    (projectile-rails-global-mode))
#+END_SRC

There are a bunch of things I'd like to do when I open a Ruby buffer:

- I don't want to insert an encoding comment.
- I want to enable =yas=, =rspec=, =yard=, =flycheck=, and =projectile-rails=.
- I'd like my RSpec tests to be run in a random order, and I'd like the output
  to be colored.
- Chruby should automatically determine the correct version for me.
- =C-c C-c= should run =xmp=, to do that nifty "eval into comments" trick.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda ()
              (setq ruby-insert-encoding-magic-comment nil)
              (yas-minor-mode)
              (rspec-mode)
              (yard-mode)
              (flycheck-mode)
              (local-set-key "\r" 'newline-and-indent)
              (setq rspec-command-options "--color --order random")
              (chruby-use-corresponding)
              (define-key ruby-mode-map (kbd "C-c C-c") 'xmp)))
#+END_SRC

I associate =ruby-mode= with Gemfiles, gemspecs, Rakefiles, and Vagrantfiles.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode
   'ruby-mode
   "\\Gemfile$"
   "\\.rake$"
   "\\.gemspec$"
   "\\Guardfile$"
   "\\Rakefile$"
   "\\Vagrantfile$"
   "\\Vagrantfile.local$")
#+END_SRC

When running RSpec tests I'd like to scroll to the first error.

#+BEGIN_SRC emacs-lisp
  (add-hook 'rspec-compilation-mode-hook
            (lambda ()
              (make-local-variable 'compilation-scroll-output)
              (setq compilation-scroll-output 'first-error)))
#+END_SRC

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

** Scala

Ensure that =scala-mode= and =sbt-mode= are installed.

#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))
  (use-package sbt-mode)
#+END_SRC

Don't show the startup message with launching ENSIME:

#+BEGIN_SRC emacs-lisp
  (setq ensime-startup-notification nil)
#+END_SRC

** =web-mode=

#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
#+END_SRC

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (rainbow-mode)
              (rspec-mode)
              (setq web-mode-markup-indent-offset 2)))
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode
   'web-mode
   "\\.erb$"
   "\\.html$"
   "\\.php$"
   "\\.rhtml$")
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

If I'm editing YAML I'm usually in a Rails project. I'd like to be able to run
the tests from any buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yaml-mode-hook 'rspec-mode)
#+END_SRC

* Terminal

I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term)
  (global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

Use a login shell:

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+BEGIN_SRC emacs-lisp
  (defun hrs/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'hrs/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+END_SRC

* Publishing and task management with Org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+END_SRC

** Task and org-capture management

Store my org files in =~/documents/org=, maintain an inbox in Dropbox, define
the location of an index file (my main todo list), and archive finished tasks in
=~/documents/org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/documents/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-inbox-file "~/Dropbox/inbox.org")
  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

I use [[http://agiletortoise.com/drafts/][Drafts]] to create new tasks, format them according to a template, and
append them to an "inbox.org" file in my Dropbox. This function lets me import
them easily from that inbox file to my index.

#+BEGIN_SRC emacs-lisp
  (defun hrs/copy-tasks-from-inbox ()
    (when (file-exists-p org-inbox-file)
      (save-excursion
        (find-file org-index-file)
        (goto-char (point-max))
        (insert-file-contents org-inbox-file)
        (delete-file org-inbox-file))))
#+END_SRC

I store all my todos in =~/documents/org/index.org=, so I'd like to derive my
agenda from there.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-index-file))
#+END_SRC

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun hrs/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/documents/notes/blog-ideas.org=,
- Maintain a todo list in =~/documents/org/index.org=.
- Convert emails into todos to maintain an empty inbox.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("b" "Blog idea"
           entry
           (file "~/documents/notes/blog-ideas.org")
           "* %?\n")

          ("e" "Email" entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n\n%a\n\n")

          ("f" "Finished book"
           table-line (file "~/documents/notes/books-read.org")
           "| %^{Title} | %^{Author} | %u |")

          ("r" "Reading"
           checkitem
           (file (org-file-path "to-read.org")))

          ("s" "Subscribe to an RSS feed"
           plain
           (file "~/documents/rss/urls")
           "%^{Feed URL} \"~%^{Feed name}\"")

          ("t" "Todo"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n")))
#+END_SRC

Refiling according to the document's hierarchy.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

Hit =C-c i= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
  (defun hrs/open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (hrs/copy-tasks-from-inbox)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'hrs/open-index-file)
#+END_SRC

Hit =M-n= to quickly open up a capture template for a new todo.

#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
  (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
  (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+END_SRC

** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
which checks the =$BROWSER= environment variable to choose the right browser.
I'd like to always use Firefox, so:

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")

  (setenv "BROWSER" "firefox")
#+END_SRC

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

**** Exporting projects

I have a few Org project definitions that I maintain in a separate elisp file.

#+BEGIN_SRC emacs-lisp
  ;; (load-file ".emacs.d/projects.el")
#+END_SRC

** TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Open compiled PDFs in =zathura= instead of in the editor.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
        '(lambda ()
           (delete '("\\.pdf\\'" . default) org-file-apps)
           (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))))
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

** Add links to Instapaper

I sometimes use [[https://instapaper.com][Instapaper]] to store articles I want to read later. The
=instapaper.el= library sends my URLs there.

#+BEGIN_SRC emacs-lisp
  (use-package instapaper)
  (require 'instapaper)

  (setq instapaper-username (netrc-username "instapaper.com")
        instapaper-password (netrc-password "instapaper.com"))
#+END_SRC

* Blogging

I maintain a blog written in Jekyll. There are plenty of command-line tools to
automate creating a new post, but staying in my editor minimizes friction and
encourages me to write.

This defines a =hrs/new-blog-post= function, which prompts the user for a title
and creates a new post (with a timestamped and slugged file name) in the blog's
=_posts/= directory. The new post includes appropriate YAML header information.

#+BEGIN_SRC emacs-lisp
  (defvar hrs/jekyll-posts-directory "~/documents/blog/_posts/")
  (defvar hrs/jekyll-post-extension ".md")

  (defun hrs/replace-whitespace-with-hyphens (s)
    (replace-regexp-in-string " " "-" s))

  (defun hrs/replace-nonalphanumeric-with-whitespace (s)
    (replace-regexp-in-string "[^A-Za-z0-9 ]" " " s))

  (defun hrs/remove-quotes (s)
    (replace-regexp-in-string "[\'\"]" "" s))

  (defun hrs/replace-unusual-characters (title)
    "Remove quotes, downcase everything, and replace characters
  that aren't alphanumeric with hyphens."
    (hrs/replace-whitespace-with-hyphens
     (s-trim
      (downcase
       (hrs/replace-nonalphanumeric-with-whitespace
        (hrs/remove-quotes title))))))

  (defun hrs/slug-for (title)
    "Given a blog post title, return a convenient URL slug.
     Downcase letters and remove special characters."
    (let ((slug (hrs/replace-unusual-characters title)))
      (while (string-match "--" slug)
        (setq slug (replace-regexp-in-string "--" "-" slug)))
      slug))

  (defun hrs/timestamped-slug-for (title)
    "Turn a string into a slug with a timestamp and title."
    (concat (format-time-string "%Y-%m-%d")
            "-"
            (hrs/slug-for title)))

  (defun hrs/jekyll-yaml-template (title)
    "Return the YAML header information appropriate for a blog
     post. Include the title, the current date, the post layout,
     and an empty list of tags."
    (concat
     "---\n"
     "title: " title "\n"
     "date: " (format-time-string "%Y-%m-%d") "\n"
     "layout: post\n"
     "# pdf_file: " (hrs/slug-for title) ".pdf\n"
     "tags: []\n"
     "---\n\n"))

  (defun hrs/new-blog-post (title)
    "Create a new blog post in Jekyll."
    (interactive "sPost title: ")
    (let ((post (concat hrs/jekyll-posts-directory
                        (hrs/timestamped-slug-for title)
                        hrs/jekyll-post-extension)))
      (if (file-exists-p post)
          (find-file post)
        (find-file post)
        (insert (hrs/jekyll-yaml-template title)))))
#+END_SRC

This selects and inserts a tag:

#+BEGIN_SRC emacs-lisp
  (defun hrs/existing-blog-tags ()
    "Return a list of all the tags currently used in my blog."
    (split-string (shell-command-to-string "cd ~/documents/blog && rake tags")))

  (defun hrs/insert-blog-tag ()
    "Select one of the current tags and insert it at point."
    (interactive)
    (insert
     (ivy-completing-read "Insert tag at point: " (hrs/existing-blog-tags))))
#+END_SRC

* Daily checklist

There are certain things I want to do regularly. I store those in a checklist.
Because different things happen on different days, the checklist is an Org
document generated by a Ruby script.

Running =hrs/today= either opens today's existing checklist (if it exists), or
renders today's new checklist, copies it into an Org file in =/tmp=, and opens
it.

#+BEGIN_SRC emacs-lisp
  (setq hrs/checklist-script "~/bin/daily-checklist")

  (defun hrs/today-checklist-filename ()
    "The filename of today's checklist."
    (concat "/home/hrs/documents/checklists/daily-checklist-" (format-time-string "%Y-%m-%d") ".org"))

  (defun hrs/today ()
    "Take a look at today's checklist."
    (interactive)
    (let ((filename (hrs/today-checklist-filename)))
      (if (file-exists-p filename)
          (find-file filename)
        (progn
          (shell-command (concat hrs/checklist-script " > " filename))
          (find-file filename)))))
#+END_SRC

Open the checklist and my TODO list side-by-side:

#+BEGIN_SRC emacs-lisp
  (defun hrs/dashboard ()
    (interactive)
    (delete-other-windows)
    (hrs/today)
    (split-window-right)
    (hrs/open-index-file))

  (global-set-key (kbd "C-c d") 'hrs/dashboard)
#+END_SRC

* RSS with =elfeed=

Install elfeed:

#+BEGIN_SRC emacs-lisp
  (use-package elfeed)
#+END_SRC

Load up my feeds:

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :config
    (progn
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/feeds.org"))))
#+END_SRC

* Writing prose

** Enable spell-checking in the usual places

I want to make sure that I've enabled spell-checking if I'm editing text,
composing an email, or authoring a Git commit.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'gfm-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)

    (add-hook 'git-commit-mode-hook 'flyspell-mode))
#+END_SRC

** Look up definitions in Webster 1913

I look up definitions by hitting =C-x w=, which shells out to =sdcv=. I've
loaded that with the (beautifully lyrical) 1913 edition of Webster's dictionary,
so these definitions are a lot of fun.

#+BEGIN_SRC emacs-lisp
  (defun hrs/dictionary-prompt ()
    (read-string
     (format "Word (%s): " (or (hrs/region-or-word) ""))
     nil
     nil
     (hrs/region-or-word)))

  (defun hrs/dictionary-define-word ()
    (interactive)
    (let* ((word (hrs/dictionary-prompt))
           (buffer-name (concat "Definition: " word)))
      (with-output-to-temp-buffer buffer-name
        (shell-command (format "sdcv -n %s" word) buffer-name))))

  (define-key global-map (kbd "C-x w") 'hrs/dictionary-define-word)
#+END_SRC

** Look up words in a thesaurus

Synosaurus is hooked up to wordnet to provide access to a thesaurus. Hitting
=C-x s= searches for synonyms.

#+BEGIN_SRC emacs-lisp
  (use-package synosaurus)
  (setq-default synosaurus-backend 'synosaurus-backend-wordnet)
  (add-hook 'after-init-hook #'synosaurus-mode)
  (define-key global-map "\C-xs" 'synosaurus-lookup)
#+END_SRC

** Editing with Markdown

Because I can't always use =org=.

- Associate =.md= files with GitHub-flavored Markdown.
- Use =pandoc= to render the results.
- Leave the code block font unchanged.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands gfm-mode

    :mode (("\\.md$" . gfm-mode))

    :config
    (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
    (custom-set-faces
     '(markdown-code-face ((t nil)))))
#+END_SRC

** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'gfm-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

** Cycle between spacing alternatives

Successive calls to =cycle-spacing= rotate between changing the whitespace
around point to:

- A single space,
- No spaces, or
- The original spacing.

Binding this to =M-SPC= is strictly better than the original binding of
=just-one-space=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
#+END_SRC

** Linting prose

I use [[http://proselint.com/][proselint]] to check my prose for common errors. This creates a flycheck
checker that runs proselint in texty buffers and displays my errors.

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

Use flycheck in the appropriate buffers:

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC

** Enable region case modification

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

** Quickly explore my "notes" directory with =deft=

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :bind ("C-c n" . deft)
    :commands (deft)
    :config

    (setq deft-directory "~/documents/notes"
          deft-recursive t
          deft-use-filename-as-title t))
#+END_SRC

* =dired=

Don't use dired in ls
#+BEGIN_SRC emacs-lisp
  (setq dired-use-ls-dired nil)
#+END_SRC

Hide dotfiles by default, but toggle their visibility with =.=.

#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+END_SRC

Open media with the appropriate programs.

#+BEGIN_SRC emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions
          '(("pdf" . "zathura")
            ("mkv" . "vlc")
            ("mp3" . "vlc")
            ("mp4" . "vlc")
            ("avi" . "vlc"))))
#+END_SRC

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:

- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =a=: all. Include "=.=" or "=..=".

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhva")
#+END_SRC

Kill buffers of files/directories that are deleted in =dired=.

#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively /deleting/ a directory, though.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

Open a file with an external program (that is, through =xdg-open=) by hitting
=C-c C-o=.

#+BEGIN_SRC emacs-lisp
  (defun dired-xdg-open ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))

  (define-key dired-mode-map (kbd "C-c C-o") 'dired-xdg-open)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil)
#+END_SRC

* ediff
#+BEGIN_SRC emacs-lisp
  (advice-add 'ediff-window-display-p :override #'ignore)
#+END_SRC

* TODO Editing settings

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun hrs/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)
#+END_SRC

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helpful)

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

** Look for executables in =/usr/local/bin=

#+BEGIN_SRC emacs-lisp
  (hrs/append-to-path "/usr/local/bin")
#+END_SRC

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

** Configure =yasnippet=

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
#+END_SRC

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
  (yas-global-mode 1)
#+END_SRC

I /don’t/ want =yas= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+BEGIN_SRC emacs-lisp
  (setq yas/indent-line nil)
#+END_SRC

** Configure =ivy= and =counsel=

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind (("C-c C-r" . ivy-resume)
           ("C-x b" . ivy-switch-buffer)
           ("C-s" . counsel-grep-or-swiper)
           ("C-c C-u" . swiper-all)
           ("C-c C-e" . ivy-wgrep-change-to-wgrep-mode)
           :map ivy-minibuffer-map
           ("RET" . ivy-alt-done)
           ("C-m" . ivy-alt-done)
           ("C-j" . ivy-done))
    :config
    (progn
      ;; Fuzzy matching
      (use-package flx :ensure t)
      (setq ivy-use-virtual-buffers t
            ivy-use-selectable-prompt t
            enable-recursive-minibuffers t
            ivy-display-style 'fancy
            ivy-height 8
            ivy-virtual-abbreviate 'full
            ivy-extra-directories nil
            ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                    (t . ivy--regex-ignore-order)))
  (ivy-mode 1)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)

    :config
    (use-package smex)

    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after counsel
    :init
    (setq ivy-format-function #'ivy-format-function-line)
    ;; Toggle `ivy-rich-mode' after modifying.
    (setq ivy-rich-display-transformers-list
          `(ivy-switch-buffer
            (:columns
             ((ivy-rich-candidate
               (:width 0.3))
              (ivy-rich-switch-buffer-size
               (:width 8))
              (ivy-rich-switch-buffer-indicators
               (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode
               (:width 15 :face warning))
              (ivy-rich-switch-buffer-project
               (:width 20 :face success))
              (ivy-rich-switch-buffer-path
               (:width (lambda (x)
                         (ivy-rich-switch-buffer-shorten-path
                          x (ivy-rich-minibuffer-width 0.3))))))
             :predicate (lambda (cand) (get-buffer cand)))
            counsel-M-x (:columns
                         ((counsel-M-x-transformer (:width 0.3))
                          (ivy-rich-counsel-function-docstring
                           (:face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 0.3))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 0.3))
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
            counsel-recentf
            (:columns
             ((ivy-rich-candidate (:width 0.5))
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))))
    :config
    (setq ivy-rich-parse-remote-buffer nil)
    (ivy-rich-mode 1))
#+END_SRC
** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+BEGIN_SRC emacs-lisp
  (use-package wgrep)

  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+END_SRC

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode)
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")

  (engine-mode t)
#+END_SRC

* Set custom keybindings

Just a few handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC
* windows
#+BEGIN_SRC lisp
(use-package eyebrowse
  :ensure t
  :diminish eyebrowse-mode
  :config (progn
            (define-key global-map (kbd "C-c-1") 'eyebrowse-switch-to-window-config-1)
            (define-key global-map (kbd "C-c-2") 'eyebrowse-switch-to-window-config-2)
            (define-key global-map (kbd "C-c-3") 'eyebrowse-switch-to-window-config-3)
            (define-key global-map (kbd "C-c-4") 'eyebrowse-switch-to-window-config-4)
            (define-key global-map (kbd "C-c-5") 'eyebrowse-switch-to-window-config-5)
            (define-key global-map (kbd "C-c-6") 'eyebrowse-switch-to-window-config-6)
            (define-key global-map (kbd "C-c-7") 'eyebrowse-switch-to-window-config-7)
            (define-key global-map (kbd "C-c-8") 'eyebrowse-switch-to-window-config-8)
            (define-key global-map (kbd "C-c-9") 'eyebrowse-switch-to-window-config-9)
            (define-key global-map (kbd "C-c-0") 'eyebrowse-switch-to-window-config-0)
            (eyebrowse-mode t)
            (setq eyebrowse-new-workspace t)))
#+END_SRC
* slack
#+BEGIN_SRC emacs-lisp
  (use-package slack
    :commands (slack-start)
    :init
    (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
    (setq slack-prefer-current-team t)
    (setq lui-time-stamp-format "[%Y-%m-%d %H:%M]")
    :config
    (slack-register-team
     :name "Bee-Fee Zone"
     :client-id nil
     :client-secret nil
     :token slack-token)
    (start-process "slackghost" "*slackghost*" "slackghost"))
  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'libnotify))

#+END_SRC
* Extra
#+BEGIN_SRC emacs-lisp
  (defun x-paste ()
    "insert text on X11's clipboard to current buffer."
    (interactive)
    (insert (shell-command-to-string "xsel -b")))

  (defun x-copy ()
    "copy text on local kill-ring to X11's clipboard."
    (interactive)
    (copy-region-as-kill (point) (mark t))
    (let ((process-connection-type nil))
        (let ((proc (start-process "xsel" "*Messages*" "xsel" "-i" "-b")))
          (process-send-string proc (car kill-ring))
          (process-send-eof proc))))
  (xclip-mode t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs-private.el")
#+END_SRC
* windows
#+BEGIN_SRC emacs-lisp
(winner-mode t)
(windmove-default-keybindings)
#+END_SRC
